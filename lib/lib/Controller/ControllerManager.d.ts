import { ObservedMap, ObservedMapMap } from "react-use-listeners";
import { WebRtcManager } from "../WebRtcManager";
import { InboundController } from "./InboundController";
import { AddInboundControllerPayload, RemoveInboundControllerPayload, ModifyInboundControllerPayload, InboundControllerBuilder, ModifyOutboundControllerPayload } from "./Controller";
import { LocalController } from "./LocalController";
import { OutboundController } from "./OutboundController";
import { MediaObject } from "../Media/MediaDevicesManager";
export declare class ControllerManager {
    webRtcManager: WebRtcManager;
    outboundControllers: ObservedMapMap<OutboundController>;
    localControllers: ObservedMap<LocalController>;
    inboundControllers: ObservedMap<InboundController>;
    inboundControllerBuilder: InboundControllerBuilder;
    logging: boolean;
    constructor(webRtcManager: WebRtcManager, inboundControllerBuilder: InboundControllerBuilder, logging?: boolean);
    getInboundController(controllerId: string): InboundController<MediaObject> | undefined;
    getLocalController(controllerId: string): LocalController<MediaObject> | undefined;
    inboundControllerAdded(fromSid: string, payload: AddInboundControllerPayload): void;
    inboundControllerRemoved(fromSid: string, payload: RemoveInboundControllerPayload): void;
    inboundControllerModified(fromSid: string, payload: ModifyInboundControllerPayload): void;
    outboundControllerModified(fromSid: string, payload: ModifyOutboundControllerPayload): void;
    addLocalController(localController: LocalController): void;
    addOutboundController(remoteSid: string, localController: LocalController): OutboundController;
    removeOutboundController(remoteSid: string, controllerId: string): void;
    removeLocalController(controllerId: string): void;
    sendModifyInboundController(remoteSid: string, payload: ModifyInboundControllerPayload): void;
    sendModifyOutboundController(remoteSid: string, payload: ModifyOutboundControllerPayload): void;
    getOutboundControllers(): ObservedMapMap<OutboundController<MediaObject>>;
    getLocalControllers(): ObservedMap<LocalController<MediaObject>>;
    getInboundControllers(): ObservedMap<InboundController<MediaObject>>;
}
